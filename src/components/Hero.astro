<section
  class="w-full h-screen flex flex-col items-center justify-center bg-gradient-to-b from-cyan-900 via-gray-700 to-amber-900"
>
  <h1
    class="text-6xl font-bold text-white uppercase text-shadow-lg text-shadow-black mb-4 py-2"
  >
    Data.cript
  </h1>
  <div class="w-full max-w-xl mb-4">
    <!-- Text Section -->
    <label for="encrypt-text" class="block text-white text-xl mb-2"
      >Insert text:</label
    >
    <textarea
      name="encrypt-text"
      id="encrypt-text"
      rows="6"
      autocomplete="off"
      placeholder="Paste here your text to encrypt or decrypt"
      class="w-full gradiente rounded-lg p-4 text-white resize-none focus:outline-none"
    ></textarea>
    <!-- Key Section -->
    <label for="key" class="block text-white text-xl mb-2">Key:</label>
    <input
      type="password"
      name="key"
      id="key"
      class="w-full gradiente rounded-lg p-4 text-white focus:outline-none"
      autocomplete="off"
      placeholder="Key"
    />
    <!-- Result Section -->
    <label for="result" class="block text-white text-xl mb-2">Result:</label>
    <input
      type="text"
      name="result"
      id="result"
      readonly
      placeholder="Here will be the result"
      class="gradiente rounded-lg p-4 text-white w-full focus:outline-none"
    />
  </div>
  <div class="flex gap-40 w-fulljustify-center items-center">
    <button
      id="encrypt"
      class="max-w-xl p-3 text-2xl text-white font-semibold uppercase bg-amber-800 rounded-lg shadow-lg
      hover:cursor-pointer hover:bg-amber-700
      active:bg-white active:text-amber-700
      transition-all"
      >Encrypt</button
    >
    <button
      id="decrypt"
      class="max-w-xl p-3 text-2xl text-white font-semibold uppercase bg-cyan-800 rounded-lg shadow-lg
      hover:cursor-pointer hover:bg-cyan-700
      active:bg-white active:text-cyan-700
      transition-all"
      >Decrypt</button
    >
  </div>
</section>

<style>
  .gradiente {
    background: linear-gradient(
      180deg,
      #164e59ff 0%,
      #0e749080 50%,
      #00000000 100%
    );
  }
</style>

<script>
  import Crypto from "crypto-js";

  // Recuperar el botones
  const $encrypt = document.getElementById("encrypt") as HTMLButtonElement;
  const $decrypt = document.getElementById("decrypt") as HTMLButtonElement;

  // Recuperar ubicación del resultado
  const $result = document.getElementById("result") as HTMLInputElement;

  // Recuperar datos del usuario
  const $text = document.getElementById("encrypt-text") as HTMLInputElement;
  const $key = document.getElementById("key") as HTMLInputElement;

  $encrypt.addEventListener("click", () => {
    const keyText = $key.value.padEnd(16, "0").slice(0, 16); // Asegurarse de que la clave tenga 16 caracteres
    const key = Crypto.enc.Utf8.parse(keyText); // Convertir la clave en un objeto WordArray

    const iv = Crypto.lib.WordArray.random(16); // Generar un vector de inicialización (IV)

    const encrypted = Crypto.AES.encrypt($text.value, key, {
      iv,
      mode: Crypto.mode.CBC,
      padding: Crypto.pad.Pkcs7,
    });

    // IV y cifrado separado por ":"
    const result = iv.toString() + ":" + encrypted.toString();
    $result.value = result;
  });

  $decrypt.addEventListener("click", () => {
    const keyText = $key.value.padEnd(16, "0").slice(0, 16); // Asegurarse de que la clave tenga 16 caracteres
    const key = Crypto.enc.Utf8.parse(keyText); // Convertir la clave en un objeto WordArray

    const [ivHex, encryptedData] = $text.value.split(":"); // Dividir la cadena en IV y cifrado

    if (!ivHex || !encryptedData) {
      $result.value = "[Wrong format]";
      return;
    }

    const iv = Crypto.enc.Hex.parse(ivHex);

    const decrypted = Crypto.AES.decrypt(encryptedData, key, {
      iv,
      mode: Crypto.mode.CBC,
      padding: Crypto.pad.Pkcs7,
    });

    const plainText = decrypted.toString(Crypto.enc.Utf8);
    $result.value = plainText || "[Wrong Key]";
  });
</script>
